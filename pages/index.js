import Head from "next/head";
import styled from "styled-components";
import { useState } from "react";
import CreateFlowForm from "/components/CreateFlowForm";
import FlowCard from "/components/FlowCard";
import { getAllFlows } from "/services/flowService";
import { useRouter } from "next/router";
import { useEffect } from "react";
import Image from "next/image";
import { AddButton } from "../components/AddButton";

export async function getServerSideProps() {
  const flowsDB = await getAllFlows();
  return {
    props: { flowsDB: flowsDB },
  };
}

export default function Home({ flowsDB }) {
  const [openForm, setOpenForm] = useState(false);
  const [editFormId, setEditFormId] = useState(null);
  const [isUpdating, setIsUpdating] = useState(false);

  const router = useRouter();
  const refreshData = () => {
    router.replace(router.asPath);
    setIsUpdating(true);
  };
  useEffect(() => {
    setIsUpdating(false);
  }, [flowsDB]);

  function toggleOpenForm() {
    setOpenForm((prev) => !prev);
  }

  async function handleFlowPost(flowData) {
    try {
      const response = await fetch("/api/flows", {
        method: "POST",
        body: JSON.stringify(flowData),
      });

      const result = await response.json();
      if (result.createdId) {
        router.push(`/flow/${result.createdId}`);
      } else {
        alert("Creating a flow did not work!!");
      }
    } catch (error) {
      console.error(error);
    }
    setOpenForm(false);
    refreshData();
  }

  async function handleFlowUpdate(flowData) {
    try {
      const response = await fetch("/api/flows", {
        method: "PATCH",
        body: JSON.stringify(flowData),
      });

      const result = await response.json();
      if (result.id) {
        router.push(`/flow/${result.id}`);
      } else {
        alert("Updating the flow did not work!!");
      }
    } catch (error) {
      console.error(error);
    }
    setOpenForm(false);
    setEditFormId(null);
    refreshData();
  }

  async function handleDelete(id) {
    try {
      const response = await fetch(`/api/flows`, {
        method: "DELETE",
        body: JSON.stringify(id),
      });

      const result = await response.json();
    } catch (error) {
      console.error(error);
    }
    refreshData();
  }

  function cancelEditFlow() {
    setEditFormId(null);
  }

  function closeForm() {
    setOpenForm(false);
  }

  const sortedFlowsDB = flowsDB.sort((a, b) => {
    if (a.id > b.id) {
      return -1;
    } else return 1;
  });

  return (
    <div>
      <Head>
        <title>My App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <StyledH2>NAMASTE</StyledH2>

        <h3>Let&apos;s flow together</h3>

        <Image
          src="/images/animation-start-s2.gif"
          width={300}
          height={300}
          alt="yoga"
          layout="responsive"
        />
        <StyledWrapper>
          <h2>Your Flows: </h2>
          <StyledParagraph>Choose a flow or create a new one:</StyledParagraph>
          {sortedFlowsDB.map((flow) => (
            <FlowCard
              key={flow.id}
              name={flow.name}
              hours={flow.hours}
              minutes={flow.minutes}
              id={flow.id}
              deleteFlow={() => handleDelete(flow.id)}
              setEditFormId={() => setEditFormId(flow.id)}
            />
          ))}
          {openForm && (
            <CreateFlowForm
              flows={flowsDB}
              handleFlowPost={handleFlowPost}
              closeForm={closeForm}
            />
          )}
          {editFormId != null &&
            flowsDB.map(
              (flow) =>
                flow.id === editFormId && (
                  <CreateFlowForm
                    key={flow.id}
                    flows={flowsDB}
                    id={flow.id}
                    editFormId={editFormId}
                    defaultName={flow.name}
                    defaultHours={flow.hours}
                    defaultMinutes={flow.minutes}
                    handleFlowUpdate={handleFlowUpdate}
                    cancelEditFlow={cancelEditFlow}
                  />
                )
            )}
          <AddButton aria-label="add a flow" onClick={toggleOpenForm}>
            +
          </AddButton>
        </StyledWrapper>
      </main>
    </div>
  );
}

const StyledH2 = styled.h2`
  font-size: 2rem;
`;

const StyledParagraph = styled.p`
  text-align: center;
`;

const StyledWrapper = styled.section`
  margin-top: 3rem;
`;
